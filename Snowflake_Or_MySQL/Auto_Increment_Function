--Add identity or autoincrement to table in Snowflake

/* In Snowflake, you can set the default value for a column, 
which is typically used to set an autoincrement or identity as the default value, 
so that each time a new row is inserted a unique id for that 
row is generated and stored and can be used as a primary key. 

You can specify the default value for a column using create table or alter table.

However, if you try to alter a table to add an autoincrement column that already 
has data in it, we will get an error in Snowflake. 

This is not supported in Snowflake, due to the underlying architecture.

Itâ€™s not as easy as altering the existing table, but there are two ways we can add an 
identity or autoincrement column to an existing table. */

--Method 1: Using autoincrement or identity as a default value.
--First we are going to create a simple table that we want to add an identity/autoincrement field to:

use database "DEMO_DATABASE";

create or replace table PK_COLORS as
    select name
    from (values ('blue'),('red'),('green')) colors (name);

describe table PK_COLORS;
select * from PK_COLORS;
    
-- Next we create a new table with the same structure as the existing table and add an idenity column.    
create or replace table pk_identity_column_example like PK_COLORS;

select * from pk_identity_column_example;




alter table pk_identity_column_example 
add column id int identity(1,3); --default value is 1 and it will increment by 3

insert into pk_identity_column_example(name) 
    select name from pk_colors;
    
    select * from pk_identity_column_example;

/* The identity autoincrement columns take two optional parameters:
         -> start the starting value of the column
          -> increment the specific amount to increment each row
          
In the example above we set the column to start at 1 and increment by 3.

autoincrement and identity are synonymous with each other and the default value for start and increment, 
if not specified, is 1 for both*/

--To replace our existing colors table with the new table:
alter table pk_identity_column_example rename to colors;

SELECT * FROM colors;
